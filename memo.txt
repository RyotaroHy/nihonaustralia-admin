NihonAustralia Admin Panel - 開発メモ

=== プロジェクト概要 ===
NihonAustraliaプラットフォームの管理者パネル
- ユーザー管理、投稿管理、お知らせ管理機能を提供
- メインのWebアプリケーション（nihonaustralia-web）と同じSupabaseデータベースを使用
- 管理者専用のインターフェースとして設計

=== 技術スタック ===
- Next.js 15 (App Router)
- React 19
- TypeScript
- Tailwind CSS
- Supabase (認証・データベース)
- React Query (TanStack Query)
- React Icons

=== プロジェクト構造 ===
src/
├── app/                    # Next.js App Router
│   ├── layout.tsx         # ルートレイアウト
│   ├── page.tsx           # ホームページ（/admin/dashboardにリダイレクト）
│   ├── globals.css        # グローバルスタイル
│   ├── admin/             # 管理者ページ
│   │   ├── layout.tsx     # 管理者レイアウト（サイドバー + ヘッダー）
│   │   ├── dashboard/     # ダッシュボードページ
│   │   ├── users/         # ユーザー管理ページ
│   │   ├── posts/         # 投稿管理ページ
│   │   └── notices/       # お知らせ管理ページ
│   └── auth/
│       └── signin/        # ログインページ
├── components/            # 共通コンポーネント
│   ├── AdminSidebar.tsx   # 管理者サイドバー
│   ├── AdminHeader.tsx    # 管理者ヘッダー
│   ├── ReactQueryClientProvider.tsx
│   ├── SupabaseProvider.tsx
│   └── ToastProvider.tsx
├── features/              # 機能別コンポーネント
│   ├── dashboard/         # ダッシュボード機能
│   ├── users/             # ユーザー管理機能
│   ├── posts/             # 投稿管理機能
│   └── notices/           # お知らせ管理機能
└── lib/                   # ユーティリティ・設定
    ├── react-query.ts     # React Query設定
    ├── supabase-browser.ts # クライアント側Supabase
    └── supabase-server.ts  # サーバー側Supabase

=== 主要機能 ===

1. ダッシュボード
   - リアルタイム統計表示（ユーザー数、投稿数、お知らせ数、アクティブ求人数、承認待ち投稿数）
   - 最近のアクティビティフィード（ユーザー登録、投稿作成、お知らせ公開）
   - 30秒間隔での自動更新
   - 統計カードとアクティビティタイムライン

2. ユーザー管理
   - ユーザー一覧表示（ページネーション対応）
   - 検索機能（名前、電話番号）
   - フィルタリング（認証済み/未認証）
   - ソート機能（作成日、最終ログイン、信頼スコア、名前）
   - 管理者認証機能（認証/認証解除ボタン）
   - 信頼スコア表示（90点満点）
   - ユーザー詳細情報（メール確認状況、州、投稿数など）

3. 投稿管理
   - 投稿一覧表示（求人、住居、Q&A、サービス）
   - 高度な検索・フィルタ機能
   - ステータス管理（下書き、公開、終了）
   - リアルタイムステータス更新
   - エンゲージメント指標（閲覧数、いいね数）
   - 投稿削除機能
   - 給与情報、場所情報の表示
   - 作成者の信頼スコア表示

4. お知らせ管理
   - お知らせCRUD機能（作成、読み取り、更新、削除）
   - 日本語・英語の二言語対応
   - モーダルベースの編集インターフェース
   - 検索機能
   - ソート機能（作成日、更新日）
   - 作成者情報の表示

=== 開発コマンド ===
npm run dev        # 開発サーバー起動（ポート3001）
npm run build      # プロダクションビルド
npm run start      # プロダクションサーバー起動
npm run lint       # ESLintチェック
npm run typecheck  # TypeScriptタイプチェック
npm run format     # Prettierフォーマット

=== 認証・セキュリティ ===
- Supabase Authを使用した認証システム
- middleware.tsで管理者ページへのアクセス制御
- 未認証ユーザーは/auth/signinへリダイレクト
- セッション管理とルート保護

=== データベース連携 ===
- nihonaustralia-webと同じSupabaseデータベースを使用
- 同じテーブル構造とRLS（Row Level Security）ポリシー
- 管理者権限による全データアクセス可能

=== UI/UXデザイン ===
- 管理者向けのクリーンなインターフェース
- レスポンシブデザイン対応
- ダークモード対応
- サイドバーナビゲーション
- 統計ダッシュボード

=== Container/Presenterパターン ===
各機能は以下のパターンで実装：
- Container: データ取得とステート管理
- Presenter: プレゼンテーション（UI）のみ
- 責任の分離と再利用性を重視

=== 実装済み機能 ===
✅ 実際のSupabaseデータとの完全連携
✅ 全機能でのCRUD操作実装
✅ リアルタイムデータ更新とキャッシング
✅ 検索・フィルタ・ソート機能
✅ ページネーション
✅ ローディング・エラー状態の処理
✅ レスポンシブデザイン
✅ ダークモード対応

=== 今後の拡張予定 ===
1. より詳細な権限管理（役割ベースアクセス制御）
2. データエクスポート機能（CSV、PDF）
3. 高度な分析・レポート機能
4. プッシュ通知システム
5. 監査ログ管理
6. バルク操作機能
7. 画像管理機能
8. ユーザー詳細プロフィール編集

=== 開発時の注意点 ===
- ポート3001で起動（メインアプリと競合回避）
- 環境変数はnihonaustralia-webと共有
- TypeScript厳格モード有効
- ESLint + Prettier設定済み
- 絶対パス(@/*)使用

=== セットアップ手順 ===
1. npm install - 依存関係インストール
2. 環境変数設定（.env.localファイル作成）
3. npm run dev - 開発サーバー起動
4. http://localhost:3001でアクセス

=== トラブルシューティング ===
- ポート競合: メインアプリ（3000）と管理者アプリ（3001）は異なるポート
- 認証エラー: Supabase設定とキーを確認
- ビルドエラー: npm run typecheckでTypeScriptエラーチェック
- スタイルエラー: Tailwind CSS設定とPostCSS確認